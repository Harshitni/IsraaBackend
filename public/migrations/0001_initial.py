# Generated by Django 5.0.14 on 2025-07-08 11:32

import datetime
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountabilityGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('daily_target_pages', models.IntegerField(default=2)),
                ('member_count', models.IntegerField(default=0)),
                ('average_streak', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('created_by', models.UUIDField(blank=True, null=True)),
                ('invite_code', models.CharField(max_length=15, unique=True)),
                ('group_type', models.CharField(default='private', max_length=10)),
            ],
            options={
                'db_table': 'accountability_groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InteractionHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('activity_type', models.TextField()),
                ('activity_id', models.TextField(blank=True, null=True)),
                ('action', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('recent_activity', models.TextField(default='{}', null=True)),
            ],
            options={
                'db_table': 'interaction_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PostCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon_name', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'post_categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PrayerReward',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('reward', models.IntegerField()),
            ],
            options={
                'db_table': 'prayer_rewards',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PrayerSupport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('supporter_user_id', models.UUIDField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'prayer_support',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PushSubscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('endpoint', models.CharField(max_length=500)),
                ('p256dh_key', models.CharField(max_length=255)),
                ('auth_key', models.CharField(max_length=255)),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'push_subscriptions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='QuranProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('surah_number', models.IntegerField()),
                ('page_number', models.IntegerField()),
                ('completed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('reading_time_seconds', models.IntegerField(default=0, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('session_id', models.UUIDField(blank=True, default=uuid.uuid4, null=True)),
                ('streak_day', models.IntegerField(default=1, null=True)),
            ],
            options={
                'db_table': 'quran_progress',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SavedPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'saved_posts',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(blank=True, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('stripe_customer_id', models.CharField(blank=True, max_length=255, null=True)),
                ('subscribed', models.BooleanField(default=False)),
                ('subscription_tier', models.CharField(blank=True, max_length=50, null=True)),
                ('subscription_end', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField()),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'subscribers',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(blank=True, null=True)),
                ('feedback_text', models.TextField(default='')),
                ('screenshot_image', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('feedback_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('feedback_phase', models.CharField(blank=True, choices=[('Under Review', 'Under Review'), ('Under Development', 'Under Development'), ('Completed', 'Completed')], max_length=25, null=True)),
            ],
            options={
                'db_table': 'user_feedbacks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserPrayerSummary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('completed_prayers', models.JSONField(default=list)),
                ('total_points', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'user_prayer_summary',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserPreference',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('onboarding_completed', models.BooleanField(default=False, null=True)),
                ('location_privacy_enabled', models.BooleanField(default=True, null=True)),
                ('spiritual_goals', models.JSONField(blank=True, default=list, null=True)),
                ('prayer_reminders', models.BooleanField(default=True, null=True)),
                ('notifications_enabled', models.BooleanField(default=True, null=True)),
                ('daily_quran_goal', models.IntegerField(default=2, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
                ('llm_provider', models.CharField(default='openai', max_length=50, null=True)),
                ('llm_model', models.CharField(default='gpt-3.5-turbo', max_length=50, null=True)),
                ('system_prompt', models.TextField(blank=True, null=True)),
                ('knowledge_base', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_preferences',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField(unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True)),
                ('current_emotional_state', models.TextField(blank=True, null=True)),
                ('last_interaction_date', models.DateTimeField(blank=True, null=True)),
                ('notification_preferences', models.JSONField(blank=True, default=dict, null=True)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('is_admin', models.BooleanField(default=False, null=True)),
                ('is_premium', models.BooleanField(default=False, null=True)),
                ('referral_source', models.CharField(blank=True, max_length=255, null=True)),
                ('referral_date', models.DateTimeField(blank=True, null=True)),
                ('subscription_plan', models.CharField(blank=True, choices=[('free', 'Free'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('family', 'Family'), ('trial', 'Trial')], default='free', max_length=20, null=True)),
            ],
            options={
                'db_table': 'user_profiles',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserProfileCommunity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(blank=True, max_length=255, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('spiritual_journey_start', models.DateField(blank=True, null=True)),
                ('is_verified_subscriber', models.BooleanField(default=False, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'user_profiles_community',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserReadingStat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_pages_read', models.IntegerField(default=0, null=True)),
                ('current_streak', models.IntegerField(default=0, null=True)),
                ('longest_streak', models.IntegerField(default=0, null=True)),
                ('total_reading_time_seconds', models.IntegerField(default=0, null=True)),
                ('last_reading_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'user_reading_stats',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VerseBookmark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('surah_number', models.IntegerField()),
                ('verse_number', models.IntegerField()),
                ('page_number', models.IntegerField(default=1)),
                ('bookmark_note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(null=True)),
                ('updated_at', models.DateTimeField(null=True)),
            ],
            options={
                'db_table': 'verse_bookmarks',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AdminAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action_type', models.CharField(max_length=100)),
                ('details', models.TextField(default='{}', null=True)),
                ('created_at', models.DateTimeField()),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_actions', to=settings.AUTH_USER_MODEL)),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_admin_actions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'admin_actions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CachedChapters',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('revelation_place', models.CharField(max_length=50)),
                ('revelation_order', models.IntegerField()),
                ('bismillah_pre', models.BooleanField(default=False)),
                ('name_simple', models.CharField(max_length=255)),
                ('name_complex', models.CharField(max_length=255)),
                ('name_arabic', models.CharField(max_length=255)),
                ('verses_count', models.IntegerField()),
                ('pages', models.TextField(default='{}')),
                ('translated_name', models.TextField(default='{}')),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'cached_chapters',
                'managed': True,
                'indexes': [models.Index(fields=['name_simple'], name='idx_cached_chapters_name')],
            },
        ),
        migrations.CreateModel(
            name='CachedReciter',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('style', models.TextField(default='{}', null=True)),
                ('qirat', models.TextField(default='{}', null=True)),
                ('translated_name', models.TextField(default='{}', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'cached_reciters',
                'managed': True,
                'indexes': [models.Index(fields=['name'], name='idx_cached_reciters_name')],
            },
        ),
        migrations.CreateModel(
            name='CacheMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cache_type', models.CharField(max_length=255, unique=True)),
                ('last_updated', models.DateTimeField()),
                ('total_records', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField()),
            ],
            options={
                'db_table': 'cache_metadata',
                'managed': True,
                'indexes': [models.Index(fields=['cache_type'], name='idx_cache_metadata_type')],
            },
        ),
        migrations.CreateModel(
            name='ChallengeGroupMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('group_id', models.UUIDField()),
                ('daily_target_pages', models.IntegerField(default=2)),
                ('joined_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('is_admin', models.BooleanField(default=False, null=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='challenge_group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'challenge_group_members',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChatHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.UUIDField(default=uuid.uuid4)),
                ('message_type', models.CharField(max_length=10)),
                ('message_content', models.TextField(validators=[django.core.validators.MinLengthValidator(1)])),
                ('emotion_context', models.TextField(blank=True, null=True)),
                ('interaction_type', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField()),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='chat_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'chat_history',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommunityJoinRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('community_id', models.UUIDField()),
                ('request_message', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('reviewed_by', models.ForeignKey(blank=True, db_column='reviewed_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_requests', to=settings.AUTH_USER_MODEL)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='join_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'community_join_requests',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('is_anonymous', models.BooleanField(default=False)),
                ('is_pinned', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='community_posts', to=settings.AUTH_USER_MODEL)),
                ('category_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='public.postcategory')),
            ],
            options={
                'db_table': 'community_posts',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommunityComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('is_anonymous', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField()),
                ('user', models.ForeignKey(db_column='user_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_comments', to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(db_column='post_id', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='public.communitypost')),
            ],
            options={
                'db_table': 'community_comments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommunityReaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('heart', 'Heart')], max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('comment_id', models.ForeignKey(blank=True, db_column='comment_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='public.communitycomment')),
                ('post_id', models.ForeignKey(blank=True, db_column='post_id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='public.communitypost')),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='community_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'community_reactions',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DiscountCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, unique=True)),
                ('discount_percentage', models.IntegerField(blank=True, null=True)),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('usage_limit', models.IntegerField(blank=True, null=True)),
                ('usage_count', models.IntegerField(default=0)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(db_column='created_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='discount_codes_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'discount_codes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DuaFavorite',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dua_category', models.CharField(max_length=100)),
                ('dua_id', models.IntegerField()),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='dua_favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'dua_favorites',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EmotionalTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('emotion_type', models.CharField(max_length=50)),
                ('intensity_level', models.IntegerField(null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'emotional_tracking',
                'managed': True,
                'indexes': [models.Index(fields=['user_id'], name='idx_eml_trk_usr_id'), models.Index(fields=['created_at'], name='idx_eml_trk_ctd_at')],
            },
        ),
        migrations.CreateModel(
            name='FreeTrial',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(default=datetime.datetime(2025, 7, 15, 11, 32, 30, 163686, tzinfo=datetime.timezone.utc))),
                ('is_active', models.BooleanField(default=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('activated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activated_trial', to=settings.AUTH_USER_MODEL)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='free_trial', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'free_trials',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('message_content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('reply_preview', models.TextField(blank=True, null=True)),
                ('group_id', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, related_name='group_chat_messages', to='public.accountabilitygroup')),
                ('replied_to_message', models.ForeignKey(blank=True, db_column='replied_to_message_id', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='public.groupchatmessage')),
            ],
            options={
                'db_table': 'group_chat_messages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupChatParticipant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_id', models.UUIDField()),
                ('joined_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('group_id', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='public.accountabilitygroup')),
            ],
            options={
                'db_table': 'group_chat_participants',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GroupJoinRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invite_code', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('request_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, default=None, null=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('group_id', models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, related_name='group_join_requests', to='public.accountabilitygroup')),
                ('reviewed_by', models.ForeignKey(blank=True, db_column='reviewed_by', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_group_requests', to=settings.AUTH_USER_MODEL)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_joining_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'group_join_requests',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='InvitationCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=20)),
                ('discount_percentage', models.IntegerField(default=50, null=True)),
                ('usage_limit', models.IntegerField(default=10, null=True)),
                ('usage_count', models.IntegerField(default=0, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(db_column='created_by', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invitation_codes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.TextField()),
                ('content', models.TextField()),
                ('file_type', models.TextField(blank=True, null=True)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'knowledge_base',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.TextField()),
                ('title', models.TextField()),
                ('message', models.TextField()),
                ('data', models.TextField(blank=True, default='{}', null=True)),
                ('read_status', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NotificationSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.TextField()),
                ('scheduled_for', models.DateTimeField()),
                ('sent', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_id', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_schedule',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PalMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sender_id', models.UUIDField()),
                ('receiver_id', models.UUIDField()),
                ('connection_id', models.UUIDField()),
                ('message_content', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('message_type', models.TextField(default='text')),
            ],
            options={
                'db_table': 'pal_messages',
                'managed': True,
                'indexes': [models.Index(fields=['connection_id', 'created_at'], name='idx_pal_messages_connection_id'), models.Index(fields=['sender_id', 'receiver_id', 'created_at'], name='idx_pal_messages_participants')],
            },
        ),
        migrations.CreateModel(
            name='PrayerPalConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('requester_id', models.UUIDField()),
                ('receiver_id', models.UUIDField()),
                ('status', models.TextField(default='pending')),
                ('connection_type', models.TextField(default='prayer')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'prayer_pal_connections',
                'managed': True,
                'indexes': [models.Index(fields=['requester_id'], name='idx_prayer_pal_connection_req'), models.Index(fields=['receiver_id'], name='idx_prayer_pal_connection_rec')],
            },
        ),
        migrations.AddConstraint(
            model_name='prayerpalconnection',
            constraint=models.UniqueConstraint(fields=('requester_id', 'receiver_id'), name='prayer_pal_connections_requester_id_receiver_id_key'),
        ),
        migrations.AddConstraint(
            model_name='prayerpalconnection',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['pending', 'accepted', 'declined'])), name='prayer_pal_connections_status_check'),
        ),
        migrations.AddConstraint(
            model_name='prayerpalconnection',
            constraint=models.CheckConstraint(check=models.Q(('connection_type__in', ['prayer', 'quran'])), name='check_connection_type'),
        ),
        migrations.AddField(
            model_name='prayersupport',
            name='post_id',
            field=models.ForeignKey(db_column='post_id', on_delete=django.db.models.deletion.CASCADE, related_name='prayer_supports', to='public.communitypost'),
        ),
        migrations.AddField(
            model_name='pushsubscription',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='push_subscriptions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='quranprogress',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quran_progress', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='savedpost',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saved_posts', to='public.communitypost'),
        ),
        migrations.AddField(
            model_name='subscriber',
            name='user_fkey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriber', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='userfeedback',
            constraint=models.CheckConstraint(check=models.Q(('feedback_phase__in', ['Under Review', 'Under Development', 'Completed']), ('feedback_phase__isnull', True), _connector='OR'), name='feedback_phase_check'),
        ),
        migrations.AddConstraint(
            model_name='userfeedback',
            constraint=models.CheckConstraint(check=models.Q(('feedback_status__in', ['pending', 'approved', 'rejected'])), name='feedback_status_check'),
        ),
        migrations.AddField(
            model_name='userprayersummary',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prayer_summaries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userpreference',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_id_fkey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='accountabilitygroup',
            name='user_profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='public.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofilecommunity',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profile_community', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='community_profile_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_posts', to='public.userprofilecommunity'),
        ),
        migrations.AddField(
            model_name='communitycomment',
            name='user_profile',
            field=models.ForeignKey(db_column='user_profile', on_delete=django.db.models.deletion.CASCADE, related_name='profile_comments', to='public.userprofilecommunity', to_field='user_id'),
        ),
        migrations.AddField(
            model_name='userreadingstat',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_reading_stats', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='versebookmark',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verse_bookmarks', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='challengegroupmember',
            index=models.Index(fields=['group_id'], name='idx_clg_grp_mbr_grp'),
        ),
        migrations.AddIndex(
            model_name='challengegroupmember',
            index=models.Index(fields=['user'], name='idx_clg_grp_mbr_usr'),
        ),
        migrations.AddConstraint(
            model_name='challengegroupmember',
            constraint=models.UniqueConstraint(fields=('group_id', 'user'), name='challenge_group_members_group_user_key'),
        ),
        migrations.AddIndex(
            model_name='chathistory',
            index=models.Index(fields=['user'], name='idx_chat_history_user_id'),
        ),
        migrations.AddIndex(
            model_name='chathistory',
            index=models.Index(fields=['session_id'], name='idx_chat_history_session_id'),
        ),
        migrations.AddIndex(
            model_name='chathistory',
            index=models.Index(fields=['created_at'], name='idx_chat_history_created_at'),
        ),
        migrations.AddConstraint(
            model_name='chathistory',
            constraint=models.CheckConstraint(check=models.Q(('message_type__in', ['user', 'noor'])), name='chat_history_message_type_check'),
        ),
        migrations.AddConstraint(
            model_name='communityjoinrequest',
            constraint=models.UniqueConstraint(fields=('community_id', 'user_id'), name='community_join_requests_community_id_user_id_key'),
        ),
        migrations.AddConstraint(
            model_name='communityjoinrequest',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['pending', 'approved', 'rejected'])), name='community_join_requests_status_check'),
        ),
        migrations.AddIndex(
            model_name='communityreaction',
            index=models.Index(fields=['post_id'], name='idx_com_rec_pst_id'),
        ),
        migrations.AddIndex(
            model_name='communityreaction',
            index=models.Index(fields=['comment_id'], name='idx_com_rec_cmt_id'),
        ),
        migrations.AddConstraint(
            model_name='communityreaction',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('comment_id__isnull', True), ('post_id__isnull', False)), models.Q(('comment_id__isnull', False), ('post_id__isnull', True)), _connector='OR'), name='post_or_comment_check'),
        ),
        migrations.AddConstraint(
            model_name='communityreaction',
            constraint=models.CheckConstraint(check=models.Q(('reaction_type__in', ['like', 'heart'])), name='community_reactions_reaction_type_check'),
        ),
        migrations.AddConstraint(
            model_name='communityreaction',
            constraint=models.UniqueConstraint(fields=('user_id', 'post_id', 'reaction_type'), name='unique_user_post_reaction'),
        ),
        migrations.AddConstraint(
            model_name='communityreaction',
            constraint=models.UniqueConstraint(fields=('user_id', 'comment_id', 'reaction_type'), name='unique_user_comment_reaction'),
        ),
        migrations.AddIndex(
            model_name='duafavorite',
            index=models.Index(fields=['user_id', 'dua_category'], name='idx_dua_fvt_usr_cat'),
        ),
        migrations.AddConstraint(
            model_name='duafavorite',
            constraint=models.UniqueConstraint(fields=('user_id', 'dua_category', 'dua_id'), name='dua_favorites_user_id_dua_category_dua_id_key'),
        ),
        migrations.AddIndex(
            model_name='groupchatmessage',
            index=models.Index(fields=['replied_to_message'], name='idx_gp_chat_msg_rp_to'),
        ),
        migrations.AddConstraint(
            model_name='groupchatparticipant',
            constraint=models.UniqueConstraint(fields=('group_id', 'user_id'), name='group_chat_participants_group_id_user_id_key'),
        ),
        migrations.AddConstraint(
            model_name='groupjoinrequest',
            constraint=models.UniqueConstraint(fields=('group_id', 'user_id'), name='group_join_requests_group_id_user_id_key'),
        ),
        migrations.AddConstraint(
            model_name='groupjoinrequest',
            constraint=models.CheckConstraint(check=models.Q(('status__in', ['pending', 'approved', 'rejected'])), name='group_join_requests_status_check'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['user_id', 'created_at'], name='idx_noti_usr_id_ct_at'),
        ),
        migrations.AddConstraint(
            model_name='prayersupport',
            constraint=models.UniqueConstraint(fields=('post_id', 'supporter_user_id'), name='prayer_support_post_id_supporter_user_id_key'),
        ),
        migrations.AddConstraint(
            model_name='pushsubscription',
            constraint=models.UniqueConstraint(fields=('user', 'endpoint'), name='push_subscriptions_user_endpoint_key'),
        ),
        migrations.AddConstraint(
            model_name='savedpost',
            constraint=models.UniqueConstraint(fields=('user_id', 'post'), name='saved_posts_user_post_key'),
        ),
        migrations.AddConstraint(
            model_name='subscriber',
            constraint=models.UniqueConstraint(fields=('email',), name='subscribers_email_key'),
        ),
        migrations.AddConstraint(
            model_name='userprayersummary',
            constraint=models.UniqueConstraint(fields=('user', 'date'), name='user_prayer_summary_user_id_date_key'),
        ),
        migrations.AddConstraint(
            model_name='userpreference',
            constraint=models.UniqueConstraint(fields=('user',), name='user_preferences_user_id_key'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['referral_source'], name='idx_user_pf_rf_src'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.UniqueConstraint(fields=('user_id',), name='user_profiles_user_id_key'),
        ),
        migrations.AddConstraint(
            model_name='userprofile',
            constraint=models.CheckConstraint(check=models.Q(('subscription_plan__in', ['free', 'monthly', 'yearly', 'family', 'trial'])), name='valid_subscription_plan'),
        ),
        migrations.AddConstraint(
            model_name='userprofilecommunity',
            constraint=models.UniqueConstraint(fields=('user',), name='user_profiles_community_user_id_key'),
        ),
        migrations.AddIndex(
            model_name='communitypost',
            index=models.Index(fields=['created_at'], name='idx_community_posts_created_at'),
        ),
        migrations.AddIndex(
            model_name='communitypost',
            index=models.Index(fields=['is_pinned', 'created_at'], name='idx_community_posts_pinned'),
        ),
        migrations.AddIndex(
            model_name='communitycomment',
            index=models.Index(fields=['post', 'created_at'], name='idx_community_comments_post_id'),
        ),
        migrations.AddConstraint(
            model_name='userreadingstat',
            constraint=models.UniqueConstraint(fields=('user',), name='user_reading_stats_user_id_key'),
        ),
        migrations.AddIndex(
            model_name='versebookmark',
            index=models.Index(fields=['user'], name='idx_verse_bookmarks_user_id'),
        ),
        migrations.AddIndex(
            model_name='versebookmark',
            index=models.Index(fields=['surah_number', 'verse_number'], name='idx_vs_bmk_sSh_verse'),
        ),
        migrations.AddIndex(
            model_name='versebookmark',
            index=models.Index(fields=['page_number'], name='idx_vs_bk_pg_nbr'),
        ),
        migrations.AddConstraint(
            model_name='versebookmark',
            constraint=models.UniqueConstraint(fields=('user', 'surah_number', 'verse_number', 'page_number'), name='verse_bookmarks_user_id_surah_verse_page_unique'),
        ),
    ]
